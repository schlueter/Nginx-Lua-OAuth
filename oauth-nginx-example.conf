resolver 8.8.8.8;

# This should only be enabled for development
lua_code_cache off;

init_by_lua_block {
    oauth_authorize_url = 'https://github.com/login/oauth/authorize'
    oauth_client_secret = '<Your client secret>'
    oauth_client_id = '<Your client id>'
    oauth_org = '<The organization whose member's are to be allowed>'
    oauth_blocklist = ''
}

server {
  listen 80;

  # Or alternatively, and with lesser precedence:
  #
  # set $oauth_client_id '<Your client id>';
  # set $oauth_client_secret '<Your client secret>';
  # set $oauth_authorize_url 'https://github.com/login/oauth/authorize';
  # set $oauth_org '<The organization whose member's are to be allowed>';
  # set $oauth_blocklist '';

  location ~ /_oauth/api/(?<api_uri>.*) { proxy_pass https://api.github.com/$api_uri; }
  location /_oauth/access_token { proxy_pass https://github.com/login/oauth/access_token; }
  location /_oauth/callback { content_by_lua_file '/vagrant/oauth-callback.lua'; }
  location /_oauth/logout { content_by_lua_file '/vagrant/oauth-logout.lua'; }
  location /_oauth/login { content_by_lua_file '/vagrant/oauth-login.lua'; }

  location / {
      access_by_lua_file "/vagrant/oauth-access.lua";
      content_by_lua_block {
          ngx.header['Content-type'] = 'text/html'
          ngx.say('You have been authenticated')
          ngx.exit(ngx.HTTP_OK)
      }
  }
}
